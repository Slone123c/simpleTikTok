// Code generated by hertz generator.

package ApiServer

import (
	"context"
	"github.com/cold-runner/simpleTikTok/apiServer/biz/handler/response"
	"github.com/cold-runner/simpleTikTok/apiServer/rpc"
	"github.com/cold-runner/simpleTikTok/kitex_gen/SocialService"
	"github.com/cold-runner/simpleTikTok/pkg/errno"
	"github.com/cold-runner/simpleTikTok/pkg/log"
	mw "github.com/cold-runner/simpleTikTok/pkg/middleware"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/cold-runner/simpleTikTok/apiServer/biz/model/ApiServer"
)

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	v, _ := c.Get(mw.IdentityKey)
	_, err = rpc.FavoriteAction(context.Background(),
		&SocialService.FavoriteActionRequest{
			UserId:     v.(*ApiServer.User).Id,
			ToVideoId:  req.VideoId,
			ActionType: req.ActionType,
		})

	if err != nil {
		log.Errorw("rpc favorite action failed", "err", err)
		response.SendFavoriteActionResponse(c, err)
		return
	}
	response.SendFavoriteActionResponse(c, errno.OK)
}

// FavoriteList .
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.FavoriteListResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentAction .
// @router /douyin/comment/action/ [POST]
func CommentAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.CommentActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// VideoCommentList .
// @router /douyin/comment/list/ [GET]
func VideoCommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req ApiServer.VideoCommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(ApiServer.VideoCommentListResponse)

	c.JSON(consts.StatusOK, resp)
}
