// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/cold-runner/simpleTikTok/pkg/dao/model"
)

func newVideoLike(db *gorm.DB, opts ...gen.DOOption) videoLike {
	_videoLike := videoLike{}

	_videoLike.videoLikeDo.UseDB(db, opts...)
	_videoLike.videoLikeDo.UseModel(&model.VideoLike{})

	tableName := _videoLike.videoLikeDo.TableName()
	_videoLike.ALL = field.NewAsterisk(tableName)
	_videoLike.ID = field.NewInt64(tableName, "id")
	_videoLike.UserID = field.NewInt64(tableName, "user_id")
	_videoLike.VideoID = field.NewInt64(tableName, "video_id")

	_videoLike.fillFieldMap()

	return _videoLike
}

type videoLike struct {
	videoLikeDo

	ALL     field.Asterisk
	ID      field.Int64
	UserID  field.Int64
	VideoID field.Int64

	fieldMap map[string]field.Expr
}

func (v videoLike) Table(newTableName string) *videoLike {
	v.videoLikeDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v videoLike) As(alias string) *videoLike {
	v.videoLikeDo.DO = *(v.videoLikeDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *videoLike) updateTableName(table string) *videoLike {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewInt64(table, "id")
	v.UserID = field.NewInt64(table, "user_id")
	v.VideoID = field.NewInt64(table, "video_id")

	v.fillFieldMap()

	return v
}

func (v *videoLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *videoLike) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 3)
	v.fieldMap["id"] = v.ID
	v.fieldMap["user_id"] = v.UserID
	v.fieldMap["video_id"] = v.VideoID
}

func (v videoLike) clone(db *gorm.DB) videoLike {
	v.videoLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v videoLike) replaceDB(db *gorm.DB) videoLike {
	v.videoLikeDo.ReplaceDB(db)
	return v
}

type videoLikeDo struct{ gen.DO }

type IVideoLikeDo interface {
	gen.SubQuery
	Debug() IVideoLikeDo
	WithContext(ctx context.Context) IVideoLikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IVideoLikeDo
	WriteDB() IVideoLikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IVideoLikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IVideoLikeDo
	Not(conds ...gen.Condition) IVideoLikeDo
	Or(conds ...gen.Condition) IVideoLikeDo
	Select(conds ...field.Expr) IVideoLikeDo
	Where(conds ...gen.Condition) IVideoLikeDo
	Order(conds ...field.Expr) IVideoLikeDo
	Distinct(cols ...field.Expr) IVideoLikeDo
	Omit(cols ...field.Expr) IVideoLikeDo
	Join(table schema.Tabler, on ...field.Expr) IVideoLikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IVideoLikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IVideoLikeDo
	Group(cols ...field.Expr) IVideoLikeDo
	Having(conds ...gen.Condition) IVideoLikeDo
	Limit(limit int) IVideoLikeDo
	Offset(offset int) IVideoLikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoLikeDo
	Unscoped() IVideoLikeDo
	Create(values ...*model.VideoLike) error
	CreateInBatches(values []*model.VideoLike, batchSize int) error
	Save(values ...*model.VideoLike) error
	First() (*model.VideoLike, error)
	Take() (*model.VideoLike, error)
	Last() (*model.VideoLike, error)
	Find() ([]*model.VideoLike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoLike, err error)
	FindInBatches(result *[]*model.VideoLike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.VideoLike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IVideoLikeDo
	Assign(attrs ...field.AssignExpr) IVideoLikeDo
	Joins(fields ...field.RelationField) IVideoLikeDo
	Preload(fields ...field.RelationField) IVideoLikeDo
	FirstOrInit() (*model.VideoLike, error)
	FirstOrCreate() (*model.VideoLike, error)
	FindByPage(offset int, limit int) (result []*model.VideoLike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IVideoLikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v videoLikeDo) Debug() IVideoLikeDo {
	return v.withDO(v.DO.Debug())
}

func (v videoLikeDo) WithContext(ctx context.Context) IVideoLikeDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v videoLikeDo) ReadDB() IVideoLikeDo {
	return v.Clauses(dbresolver.Read)
}

func (v videoLikeDo) WriteDB() IVideoLikeDo {
	return v.Clauses(dbresolver.Write)
}

func (v videoLikeDo) Session(config *gorm.Session) IVideoLikeDo {
	return v.withDO(v.DO.Session(config))
}

func (v videoLikeDo) Clauses(conds ...clause.Expression) IVideoLikeDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v videoLikeDo) Returning(value interface{}, columns ...string) IVideoLikeDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v videoLikeDo) Not(conds ...gen.Condition) IVideoLikeDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v videoLikeDo) Or(conds ...gen.Condition) IVideoLikeDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v videoLikeDo) Select(conds ...field.Expr) IVideoLikeDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v videoLikeDo) Where(conds ...gen.Condition) IVideoLikeDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v videoLikeDo) Order(conds ...field.Expr) IVideoLikeDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v videoLikeDo) Distinct(cols ...field.Expr) IVideoLikeDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v videoLikeDo) Omit(cols ...field.Expr) IVideoLikeDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v videoLikeDo) Join(table schema.Tabler, on ...field.Expr) IVideoLikeDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v videoLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IVideoLikeDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v videoLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) IVideoLikeDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v videoLikeDo) Group(cols ...field.Expr) IVideoLikeDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v videoLikeDo) Having(conds ...gen.Condition) IVideoLikeDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v videoLikeDo) Limit(limit int) IVideoLikeDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v videoLikeDo) Offset(offset int) IVideoLikeDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v videoLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IVideoLikeDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v videoLikeDo) Unscoped() IVideoLikeDo {
	return v.withDO(v.DO.Unscoped())
}

func (v videoLikeDo) Create(values ...*model.VideoLike) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v videoLikeDo) CreateInBatches(values []*model.VideoLike, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v videoLikeDo) Save(values ...*model.VideoLike) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v videoLikeDo) First() (*model.VideoLike, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLike), nil
	}
}

func (v videoLikeDo) Take() (*model.VideoLike, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLike), nil
	}
}

func (v videoLikeDo) Last() (*model.VideoLike, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLike), nil
	}
}

func (v videoLikeDo) Find() ([]*model.VideoLike, error) {
	result, err := v.DO.Find()
	return result.([]*model.VideoLike), err
}

func (v videoLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.VideoLike, err error) {
	buf := make([]*model.VideoLike, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v videoLikeDo) FindInBatches(result *[]*model.VideoLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v videoLikeDo) Attrs(attrs ...field.AssignExpr) IVideoLikeDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v videoLikeDo) Assign(attrs ...field.AssignExpr) IVideoLikeDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v videoLikeDo) Joins(fields ...field.RelationField) IVideoLikeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v videoLikeDo) Preload(fields ...field.RelationField) IVideoLikeDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v videoLikeDo) FirstOrInit() (*model.VideoLike, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLike), nil
	}
}

func (v videoLikeDo) FirstOrCreate() (*model.VideoLike, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.VideoLike), nil
	}
}

func (v videoLikeDo) FindByPage(offset int, limit int) (result []*model.VideoLike, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v videoLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v videoLikeDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v videoLikeDo) Delete(models ...*model.VideoLike) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *videoLikeDo) withDO(do gen.Dao) *videoLikeDo {
	v.DO = *do.(*gen.DO)
	return v
}
